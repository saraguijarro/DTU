#R0 : 0
#R11 : 1 (incrementer)
#maths
#R1 : number to be factorized, dynamically updated
#R2 : memory index
#R3 : current number to test
#R8 : x_temp
#R9 : x_n
#R10 : x_(n+1)

#division
#R4 : number to divide
#R5 : number to divide by
#R6 : number to store division
#R7 : number to jump back to after division

#misc
#R12 : conditional
#R13 : index to jump to
#R14 : general reg (used by division)


#INITIALIZE
0: LI R2, 0;
1: LI R11, 1;
2: LD R1, R2;        #load number to be factorized to R1
3: ADD R2, R11, R0;       #increment mem-index

#FACTORIZE BY 2
4: LI R13, 17;
5: AND R12, R1, R11;  #test if last bit of R1 is 1
6: JEQ R13, R12, R11; #jump to next sequence if R1 is odd
7: ADD R4, R1, R0;    #put R1 in division register
8: LI R5, 2;          #divide by two
9: LI R7, 12;         #go back to program
10: LI R13, 58;      
11: JR R13;           #go to division
12: ADD R1, R6, R0;   #update R1
13: SD R5, R2;        #store divider in memory
14: ADD R2, R2, R11;  #increment memindex
15: LI R13, 4;        #jump back to factorizer
16: JR R13;          

#FIND SQRT OF R1
17: LI R9, 40;        #Xn = 40
18: LI R10, 1;        #xn+1 = 1

19: LI R13, 36;       
20: JEQ R13, R9, R10; #if sqrt found, jump to next seq
21: ADD R4, R1, R0;   #divide r1
22: ADD R5, R9, R0;   #    by xn
23: LI R13, 58;      
24: LI R7, 26;        #go back to program after division
25: JR R13;           #Do division
26: ADD R8, R10, R0;  #Add xn+1 to xtemp
27: ADD R4, R6, R9;   #Divide (xn + r1/xn)
28: LI R5, 2;         #    by 2
29: LI R7, 32;        #Back to program 
30: LI R13, 58;      
31: JR R13;
32: ADD R10, R6, R0;  #xn+1 = (xn+r1/xn)/2
33: ADD R9, R8, R0;
34: LI R13, 19;
35: JR R13;


#PERFORM FACTORIZATIONS
36: ADD R10, R10, R11;#Add 2 to sqrt for margin
37: ADD R10, R10, R11;
38: LI R3, 3;         #Init r3 to 3

39: LI R13, 43;
40: JLT R13, R3, R10; #Don't end if sqrt > r3
41: SD R1, R2;
42: END;
43: ADD R4, R1, R0;   #Divide r1
44: ADD R5, R3, R0;   #    by r3
45: LI R13, 58;      
46: LI R7, 48;
47: JR R13;

48: LI R13, 53;
49: JEQ R13, R4, R0;  #If there was no rest after division

50: ADD R3, R3, R11;  #only execute if there was a rest after div
51: LI R13, 39;       #adds 1 to r3 and jumps back to fac
52: JR R13;

53: ADD R1, R6, R0;   #update R1
54: SD R5, R2;        #Add divider to mem
55: ADD R2, R2, R11;  #increment memindex
56: LI R13, 39;
57: JR R13;           #go back to factorization


#DIVISION MODULE
58: LI R6, 0;         #R6 contains result of division
59: JLT R7, R4, R5;   #Jump back to program if divided is smaller than divider
60: SUB R4, R4, R5;   #subtract divider from divided
61: ADD R6, R6, R11;  #increment result
62: LI R13, 59;       #back to start
63: JR R13;

